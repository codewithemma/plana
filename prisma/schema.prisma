// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String?
  lastName    String?
  phoneNumber String?  
  email       String   @unique
  username    String   @unique
  password    String
  role        String   @default("ATTENDEE")
  isVerified  Boolean  @default(false)
  hasPremiumPlan        Boolean   @default(false) 
  subscriptionExpiresAt DateTime?    
  tokens      Token[]  @relation("UserTokens")
  events      Event[]  @relation("UserEvents")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Nonce {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  uid       String
  email     String
  purpose   String
  token     String?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Token {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  refreshToken String
  ip           String
  userAgent    String
  isValid      Boolean  @default(true)
  userId       String   @db.ObjectId
  user         User     @relation("UserTokens", fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Event {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  eventType   String
  image       String
  location    String
  fee         String
  tags        String[]
  duration    String
  date        DateTime
  attendees   Attendee[]
  organizerId String     @db.ObjectId
  organizer   User       @relation("UserEvents", fields: [organizerId], references: [id])
  speakers    Speaker[]
  tickets     Ticket[]
  hasSpeakers Boolean @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Ticket {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   // Name of the ticket type (e.g., "VIP", "General Admission")
  description String? // Optional description of the ticket
  status    String @default("PENDING")
  eventId   String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  price     String    
  paymentReference String // Payment reference for paid events, if applicable
  attendees Attendee[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendee {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String   // Name of the attendee
  email           String   
  phone           String?  // Optional phone number for additional contact
  ticketId        String   @db.ObjectId
  ticket          Ticket   @relation(fields: [ticketId], references: [id])
  eventId         String   @db.ObjectId
  event           Event    @relation(fields: [eventId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
    @@unique([email, eventId]) 
}

model Speaker {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String // Name of the speaker or performer
  email    String @unique
  title    String // Title or role of the speaker (e.g., "Keynote Speaker")
  bio      String // Biography of the speaker
  topic    String
  image String? // Image URL for the speaker (optional)
  eventId  String  @db.ObjectId // Foreign key for the event
  event    Event   @relation(fields: [eventId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

